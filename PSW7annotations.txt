Missing in PDF 01 or futher explanations
Class 01
settings.py:
>LANGUAGE_CODE = 'pt-BR'
>TIME_ZONE = 'America/Sao_Paulo'

add
INSTALLED_APPS = [
'perfil'
]

Create URL for HOME:
from django.urls import path
from . import views

urlpatterns = [
    path('home/',views.home, name= "home"),
]

Config templates (create folder outside the core(templates>bases) and app(perfil>templates), and also inside the app):
settings.py 
import os

TEMPLATES = [
	{
	'DIRS': [os.path.join(BASE_DIR, 'templates')],
	}
]

add HTML files for base and home (In home , base is extended through django template. Home changes base block from body)

settings.py config create static folder under root>tamplates, inside it generate one folder for app (for now perfil) and one for geral('general'), also create js, img, and css folders inside every one of those. 

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates/static'),)
STATIC_ROOT = os.path.join('static')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

Add static base.css under geral>css . load static into base.html via django {% load static %} tempalte and link the path to the geral base.css file via template href="{% static 'geral/css/base.css' %} ". 

Add home.css under static>perfil>css , link it into home.html 
{% load static %}
{% block 'head' %}
    <link rel="stylesheet" href="{% static 'perfil/css/home.css' %}">
{% endblock 'head' %}

add images to static>perfil>img and add into the html file the references to them via template exp: <img class="icone-setas" src="{% static 'perfil/img/entradas.png' %}">

Add new url and view for gerenciar int perfil>urls.py and perfil>views.py  (create gerenciar.html into perfil's template)

Crate models Categoria and Conta, under perfil>models.py, python manage.py makemigrations > python manage.py migrate

Create admin user:
python manage.py createsuperuser
user:
email:
password:

add your models for each app you desire into admin.py for the respective app, example of perfil>admin.py:
from django.contrib import admin
from .models import Conta, Categoria
# Register your models here.

admin.site.register(Conta)
admin.site.register(Categoria)

Edit form from gerenciar.html (action to django template of url, add csrftoken to the end of form to ensure security. andd a value to the input in the end of the form <input style="width: 100%" type="submit" class="botao-principal" value = "Send" >){django sends the request.POST param from a view as a python dictionary, setting the names of form camps as keys, and ther fillings as values}, add the path into perfil>urls.py to cadastrar_banco and the view to perfil>views.py (add imports > from .models import Conta to views, and add redirect to django.shortcuts). Make icon mandatory <input type="file" placeholder="Ícone" name="icone" required>. 
*to send files form must have enctype='multipart/form-data', the request gets it from .FILES (not .POST)

#TODO 01 add validation to other fields into cadastrar_banco

Adding messages:
settings.py insert section for messages ant the end, and new import at the top from django.contrib.messages import constants (import it into the views that use them as well, + from django.contrib import messages )
add messages to validations into perfil>>views.py (error, success, alerts, ...) 
add template to validate messages into gerenciar.html, at the top of page construction

Modify gerenciar view to search for all accounts, and send it to the template as a context via python dict:
    contas = Conta.objects.all()
    return render(request, 'gerenciar.html', {'contas': contas,})

Add URL for media into core>urls.py :
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('perfil/', include('perfil.urls')),
    
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


Modify gerenciar view again to sum the total amount of accs and send it via context, also remember to change the value displayed into the html via template {{total_contas.valor__sum}}:
total_contas = contas.aggregate(Sum('valor'))
*from django.db.models import Sum needed

Adding delete actiong to image into acc displayed in gerenciar.html:
<a href="/perfil/deletar_banco/{{conta.id}}"><img src="{% static 'perfil/img/exit.png' %}"></a> after each acc in for
Add path to perfil>urls.py path('deletar_banco/<int:id>', views.deletar_banco, name="deletar_banco") and add view to perfil>views.py

Setting up categories:
change form into gerenciar.html: <form action="{% url 'cadastrar_categoria' %}" method="POST">{% csrf_token %}
add path to perfil>urls.py and view to perfil>view.py

#TODO 02 validate category form camps

Modify gerenciar view to search all categories and send them via context. Under perfil add path and view to update category. Change html to display categories:
#TODONE deletar_categoria , set up  like deletar banco

                    {% for categoria in categorias %}
                        <div class="lista-categorias-main">
                            <span><a href="{% url 'update_categoria' categoria.id %}"><img src="{% if categoria.essencial %}{% static 'perfil/img/check.png' %}{% else %}{% static 'perfil/img/exit.png' %}{% endif %}"></a>  {{categoria}}</span>
                            <span class="categoria_valor_planejamento {% if categoria.valor_planejamento >= 0 %}positivo{% else %}negativo{% endif %}"> R$ {{categoria.valor_planejamento}}&nbsp&nbsp&nbsp<a href="/perfil/deletar_categoria/{{categoria.id}}"><img src="{% static 'perfil/img/saidas.png' %}"></a></span>
                        </div>
                        <br>
                    {% endfor %}


Create function to sum the values of some atribute (getattr) in a query set, go back and change total_contas (remove the Sum import etc, change the total value display into gerenciar.html template as well):
create utils.py under perfil folder and create a func to calculate total(import into perfil's views from .utils import calcula_total)
total_contas = calcula_total()


Modify Home page:
grab all accs, send via context along side total amount that was calculated. Implant the templates into home.html:

                        {%for conta in contas%}
                            <div class="lista-conta">
                                <span>{{conta}}</span>
                                <span class="total-conta">R$ {{conta.valor}}</span>
                            </div>
                            <br>
                        {%endfor%}
Change url to gerenciar:
<a href="{% url 'gerenciar' %}" class="botao-principal">Gerenciar contas</a>

*insert template for total amount


TODO CLASS 01:
#TODONE deletar_categoria , set up  like deletar banco

#Changed options from static to dynamic into gerenciar.html picker for bank types and PF-PJ types, using model 

#TODONE 01 add validation to other fields into cadastrar_banco

#TODONE 02 validate category form camps


Class 02:
Install new app extrato under setting.py:
INSTALLED_APPS = [
	'extrato',
]
Add parth to core urls.py
path('extrato/', include('extrato.urls')),
Create urls file to extrato app and add path 

Create view for novo_valor under extrato app remenber to import models from perfil > from perfil.models import Conta, Categoria

Create templates folderfor extrato and add novo_valor.html to it. Inside it make categories and accounts selects to dynamic via templates.

Create model for Valores into extrato models.py also import models from perfil > from perfil.models import Conta, Categoria

Add valores to extrato admin.py admin.site.register(Valores)

Create the POST functionality for novo_valor remenber to import messages and Valores from .model:
from .models import Valores
from django.contrib import messages
from django.contrib.messages import constants

#TODO 01 validate form for novo_valor
*added validations for HTTP methods into perfil views.py

Create path in url and view for view_extrato. Remenber to import datetime, also add the view_extrato.html to the templates under extrato app. At least change the action of the from so it sends right beack to novo_valor

#TODO 02 message acord to in or out

In root templates>static add extrato folder with respective img, css and js

Change form inside view_extrato.html

Add functionalities for the filters inside the view, gatting the fields

#TODO 03 validate filters and add dynamic time range. Also add neutral to filters
#TODO 04 clear filters button 

Install GTK3 > 
GTK for Windows refers to the Windows port of the GTK (GIMP Toolkit) library. 
GTK provides a set of libraries and tools for developers to create cross-platform applications with a consistent look and feel. It includes a wide range of widgets (UI elements) such as buttons, menus, text fields, and more, along with various APIs for handling user input, event handling, and graphics rendering.

GTK for Windows allows developers to build native Windows applications using GTK. It provides the necessary libraries, headers, and tools to compile and run GTK-based applications on the Windows operating system. By using GTK, developers can write their application code once and deploy it on multiple platforms, including Windows, Linux, and macOS, with minimal modifications.

install the weasyprint lib>
WeasyPrint is a Python library that allows you to generate PDF documents and web page snapshots (PNG or SVG images) from HTML and CSS. It provides a convenient way to convert web content into printable documents or static images.

Create path and view to exportar_pdf into extrato app. import os, settings, weasyprint and render_to_string (converts to html without httpresponse of render) in views: from django.template.loader import render_to_string, import os, from django.conf import settings and from weasyprint import HTML

to save bytes im MEM from io import BytesIO: from io import BytesIO. This works so the .pdf will not be downloaded in HTML().write_pdf. Before returnning pdf seek(0)to send pointer to the beginnig of the file

Import django file response to send file> from django.http import FileResponse

Creathe partials folder under templates root, pieces of html

Add extrato.html to partials folder and send to the url inside the button in view_extrato.html

Start planejamento app , remember to put under setting.py and add the path to urls.py in core

Create urls.py for planejamento app and create the view for definir_planejamento(importing Categoria from perfil.models)

Create the planejamento templates folder and add definir_planejamento.html to it

Create under root templates>static the planejamento folder with respective sub folders js,img and css and ass the script to js

Import the jsfile into in definir.planejamento.html by :  <script src="{% static 'planejamento/js/definir_planejamento.js' %}"></script> and add functionality to the button by : onclick="update_valor_planejamento_categoria({{categoria.id}})" add dynamic ids to the inputs inside the .html by: id="valor-categoria-{{categoria.id}}"

*Change input type to text to see the values. Since text values were being typed in js with , separator . Replaced them into the function when recieving : novo_valor = novo_valor.replace(',', 'temp').replace('.', ',').replace('temp', '.')

Create the URL to update categories by adding path and view inside planejamento app (remembering the required imports). json library needed cause request was not via POST (csrf exempt as example, but this is not great practice)

#TODO 05 validate update_valor_categoria request 

Create path and view to ver_planejamento under the planejamento app. Also add ver_planejamento.html to the templates folder (under the app)

#TODO 06 fix if values 0 

Add functions to the Categories model, so it returns the expended amount (in the month) .*Import the datetime and from .utils import calcula_total Cast to int() the percentage to avoid , . diferences. **ADD .filter(tipo='S') to total_gasto
#TODONE use calcula total from utils

#TODO 07 make it so total_gasto could recive time ranges

#TODO 08 Add total bar to html in ver_planejamento.html

TODO CLASS 02:
#TODONE 01 validate form for novo_valor

#TODONE 02 message acord to in or out

#TODONE 03 validate filters and add dynamic time range. Also add neutral to filters **LATER make applied filters stay selected in html

#TODONE 04 clear filters button 

#TODONE 05 validate update_valor_categoria request 

#TODONE 06 fix if values 0

#TODONE use calcula total from utils

#TODONE 07 make it so total_gasto could recive time ranges **LATER learn about Passing arguments to model methods in Django templates

#TODONE 08 Add total bar to html in ver_planejamento.html (total bar still not dynamic, only showing current month)